/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Login;

import Constantes.Const;
import Constantes.Expressions;
import Database.DAO;
import Dictionary.DictionaryFrame;
import Users.UserInstance;
import Utils.Cryptography;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author gbartholomeu
 */
public class LoginFrame extends javax.swing.JFrame {

    private static LoginFrame loginInstance = null;
    private final static Logger LOGGER = Logger.getLogger(LoginFrame.class.getName());

    /**
     * Creates new form LoginFrame
     */
    public LoginFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEdit = new javax.swing.JPanel();
        txtUser = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        txtPassw = new javax.swing.JPasswordField();
        lblPassw = new javax.swing.JLabel();
        pnlButtons = new javax.swing.JPanel();
        btnLogin = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("frmLogin"); // NOI18N

        txtUser.setToolTipText("Insira o usuário de login");
        txtUser.setName("txtUser"); // NOI18N

        lblUser.setText("Usuário:");
        lblUser.setName("lblUser"); // NOI18N

        txtPassw.setToolTipText("Insira a senha do usuário para login");
        txtPassw.setName("txtPassw"); // NOI18N

        lblPassw.setText("Senha:");
        lblPassw.setName("lblPassw"); // NOI18N

        javax.swing.GroupLayout pnlEditLayout = new javax.swing.GroupLayout(pnlEdit);
        pnlEdit.setLayout(pnlEditLayout);
        pnlEditLayout.setHorizontalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUser)
                    .addComponent(lblPassw))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPassw, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(txtUser))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        pnlEditLayout.setVerticalGroup(
            pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassw))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlEdit, java.awt.BorderLayout.CENTER);

        pnlButtons.setLayout(new java.awt.GridLayout(1, 0));

        btnLogin.setMnemonic('E');
        btnLogin.setText("Entrar");
        btnLogin.setName("btnLogin"); // NOI18N
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        pnlButtons.add(btnLogin);

        btnExit.setMnemonic('S');
        btnExit.setText("Sair");
        btnExit.setMaximumSize(new java.awt.Dimension(63, 23));
        btnExit.setMinimumSize(new java.awt.Dimension(63, 23));
        btnExit.setName("btnExit"); // NOI18N
        btnExit.setPreferredSize(new java.awt.Dimension(63, 23));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        pnlButtons.add(btnExit);

        getContentPane().add(pnlButtons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        /*Random r = new Random();
        byte[] salt = Cryptography.getSecuredByte();
        int interations = r.nextInt(10) + 1;
        int keyLength = r.nextInt(10) + 1;
        byte[] senhaCriptografia = Cryptography.getSenhaEncriptografada(salt, interations, keyLength, new String(getTxtPassw().getPassword()));
        int retorno = DAO.insertIntoDatabase(Const.SQL.INSERT_USER.getSqlCode(), getTxtUser().getText(), "Gabriel Bartholomeu", salt, interations, keyLength, senhaCriptografia, 1);

        if (retorno == 0) {
            JOptionPane.showMessageDialog(this, "Usuário não cadastrado");
        }*/

        String retorno = "";
        int cdUser = -1;
        byte[] salt = null;
        int interations = 1;
        int key = 1;
        byte[] password = null;
        int isAdmin = 0;
        if (!"".equalsIgnoreCase(getTxtUser().getText().trim())) {

            Object rs = DAO.selectFromDatabase(Const.SQL.SELECT_USER.getSqlCode(), getTxtUser().getText());
            if (rs instanceof ResultSet) {
                try {
                    while (((ResultSet) rs).next()) {
                        cdUser = ((ResultSet) rs).getInt("NR_SEQUENCE");
                        retorno = ((ResultSet) rs).getString("QTD");
                        salt = ((ResultSet) rs).getBytes("SALT");
                        interations = ((ResultSet) rs).getInt("INTERA");
                        key = ((ResultSet) rs).getInt("KEYL");
                        password = ((ResultSet) rs).getBytes("PASS");
                        isAdmin = ((ResultSet) rs).getInt("ADMIN");
                    }
                } catch (SQLException ex) {
                    LOGGER.info(new StringBuilder().append(Expressions.USER.USER_SELECT_RETURN_FAIL.getExpression()).append(ex).toString());
                }

                if ("1".equalsIgnoreCase(retorno)) {
                    String passwordField = new String(getTxtPassw().getPassword());
                    byte[] hash = Cryptography.getEncryptedPassword(passwordField, salt, interations, key);
                    if (Arrays.equals(hash, password)) {
                        UserInstance.setUsuarioAtivo(cdUser);
                        UserInstance.setIsAdmin(isAdmin == 1);
                        DictionaryFrame dic = new DictionaryFrame(getLoginFrame());
                        SwingUtilities.invokeLater(() -> (dic.setConfiguration()));
                        dic.setVisible(true);
                        getLoginFrame().setVisible(false);
                    } else {
                        JOptionPane.showMessageDialog(getLoginFrame(), Expressions.USER.WRONG_PASSWORD.getExpression());
                    }
                } else {
                    JOptionPane.showMessageDialog(getLoginFrame(), Expressions.USER.MISSING_USER.getExpression());
                }
            }
        } else {
            JOptionPane.showMessageDialog(getLoginFrame(), Expressions.USER.NO_USER.getExpression());
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        getLoginFrame().dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            loginInstance = new LoginFrame();
            getLoginInstance().setConfiguration();
            getLoginInstance().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel lblPassw;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlEdit;
    private javax.swing.JPasswordField txtPassw;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void setConfiguration() {
        getLoginFrame().setLocationRelativeTo(null);
        getLoginFrame().setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        getLoginFrame().setResizable(false);
        addListeners();
        SwingUtilities.invokeLater(() -> {
            getTxtUser().requestFocus();
        });
    }

    private void addListeners() {
        KeyListener enterListener = new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnLoginActionPerformed(null);
                }
            }
        };
        getTxtUser().addKeyListener(enterListener);
        getTxtPassw().addKeyListener(enterListener);
        getBtnLogin().addKeyListener(enterListener);

        KeyListener escListener = new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    getLoginFrame().dispatchEvent(new WindowEvent(getLoginFrame(), WindowEvent.WINDOW_CLOSING));
                }
            }
        };
        getTxtUser().addKeyListener(escListener);
        getTxtPassw().addKeyListener(escListener);
        getBtnLogin().addKeyListener(escListener);
        getBtnExit().addKeyListener(escListener);
    }

    public LoginFrame getLoginFrame() {
        return loginInstance;
    }

    public static LoginFrame getLoginInstance() {
        return loginInstance;
    }

    public static void setLoginInstance(LoginFrame loginInstance) {
        LoginFrame.loginInstance = loginInstance;
    }

    public JButton getBtnExit() {
        return btnExit;
    }

    public JButton getBtnLogin() {
        return btnLogin;
    }

    public JPasswordField getTxtPassw() {
        return txtPassw;
    }

    public JTextField getTxtUser() {
        return txtUser;
    }
}
